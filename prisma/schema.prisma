generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "erguen"]
}

model users {
  userId             String               @id @db.Uuid
  email              String
  name               String?
  eventParticipation eventParticipation[]
  events             events[]
  userAnswer         userAnswer[]
  users              auth_users           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  wishUpvote         wishUpvote[]
  wishes             wishes[]

  @@map("users")
  @@schema("erguen")
}

model events {
  eventId            String               @id(map: "Events_pkey") @unique(map: "Events_eventId_key") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String
  description        String?
  room               String?
  startDate          DateTime             @db.Date
  endDate            DateTime             @db.Date
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  trainerId          String               @db.Uuid
  eventParticipation eventParticipation[]
  users              users                @relation(fields: [trainerId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "Events_trainerId_fkey")
  surveys            surveys?

  @@schema("erguen")
}

model wishes {
  wishId             String       @id(map: "Wishes_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String
  description        String?
  isConvertedToEvent Boolean      @default(false)
  createdAt          DateTime     @default(now()) @db.Timestamptz(6)
  wishCreator        String       @db.Uuid
  wishUpvote         wishUpvote[]
  users              users        @relation(fields: [wishCreator], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "Wishes_wishCreator_fkey")

  @@schema("erguen")
}

model wishUpvote {
  upvoteId   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @db.Uuid
  wishId     String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  users      users    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)
  wishes     wishes   @relation(fields: [wishId], references: [wishId], onDelete: Cascade, onUpdate: NoAction)

  @@schema("erguen")
}

model eventParticipation {
  eventParticipationId String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at           DateTime @default(now()) @db.Timestamptz(6)
  participantId        String   @db.Uuid
  eventId              String   @db.Uuid
  Events               events   @relation(fields: [eventId], references: [eventId], onDelete: Cascade, onUpdate: NoAction)
  users                users    @relation(fields: [participantId], references: [userId], onDelete: Cascade, onUpdate: NoAction)

  @@schema("erguen")
}

model surveyAnswerOptions {
  answerId        String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  questionId      String          @db.Uuid
  answerText      String
  created_at      DateTime        @default(now()) @db.Timestamptz(6)
  surveyQuestions surveyQuestions @relation(fields: [questionId], references: [questionId], onDelete: Cascade, onUpdate: NoAction)
  userAnswer      userAnswer[]

  @@schema("erguen")
}

model surveyQuestions {
  questionId          String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  surveyId            String                @db.Uuid
  questionText        String
  isMultipleChoice    Boolean               @default(false)
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  surveyAnswerOptions surveyAnswerOptions[]
  surveys             surveys               @relation(fields: [surveyId], references: [surveyId], onDelete: Cascade, onUpdate: NoAction)

  @@schema("erguen")
}

model surveys {
  surveyId        String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  eventId         String            @unique @db.Uuid
  title           String
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  surveyQuestions surveyQuestions[]
  Events          events            @relation(fields: [eventId], references: [eventId], onDelete: Cascade, onUpdate: NoAction)

  @@schema("erguen")
}

model userAnswer {
  userAnswerId        String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String              @db.Uuid
  answerId            String              @db.Uuid
  created_at          DateTime            @default(now()) @db.Timestamptz(6)
  surveyAnswerOptions surveyAnswerOptions @relation(fields: [answerId], references: [answerId], onDelete: Cascade, onUpdate: NoAction)
  users               users               @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)

  @@schema("erguen")
}


model auth_users {
  instance_id                 String?           @db.Uuid
  id                          String            @id @db.Uuid
  aud                         String?           @db.VarChar(255)
  role                        String?           @db.VarChar(255)
  email                       String?           @db.VarChar(255)
  encrypted_password          String?           @db.VarChar(255)
  email_confirmed_at          DateTime?         @db.Timestamptz(6)
  invited_at                  DateTime?         @db.Timestamptz(6)
  confirmation_token          String?           @db.VarChar(255)
  confirmation_sent_at        DateTime?         @db.Timestamptz(6)
  recovery_token              String?           @db.VarChar(255)
  recovery_sent_at            DateTime?         @db.Timestamptz(6)
  email_change_token_new      String?           @db.VarChar(255)
  email_change                String?           @db.VarChar(255)
  email_change_sent_at        DateTime?         @db.Timestamptz(6)
  last_sign_in_at             DateTime?         @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?         @db.Timestamptz(6)
  updated_at                  DateTime?         @db.Timestamptz(6)
  phone                       String?           @unique
  phone_confirmed_at          DateTime?         @db.Timestamptz(6)
  phone_change                String?           @default("")
  phone_change_token          String?           @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?         @db.Timestamptz(6)
  confirmed_at                DateTime?         @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?           @default("") @db.VarChar(255)
  email_change_confirm_status Int?              @default(0) @db.SmallInt
  banned_until                DateTime?         @db.Timestamptz(6)
  reauthentication_token      String?           @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?         @db.Timestamptz(6)
  is_sso_user                 Boolean           @default(false)
  deleted_at                  DateTime?         @db.Timestamptz(6)
  is_anonymous                Boolean           @default(false)
  users                       users?

  @@index([instance_id])
  @@index([is_anonymous])
  @@map("users")
  @@schema("auth")
}




